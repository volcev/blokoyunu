#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

try {
  // db.json dosyasƒ±nƒ± oku
  const dbPath = path.join(__dirname, 'db.json');
  const db = JSON.parse(fs.readFileSync(dbPath, 'utf8'));

  console.log('üîç Digzone kazƒ±lmƒ±≈ü blok sayƒ±sƒ± doƒüru ≈üekilde hesaplanƒ±yor...');

  let totalDugBlocks = 0;
  let blocksWithStatusDug = 0;
  let blocksWithDugBy = 0;
  let blocksWithOwner = 0;

  // Grid'deki t√ºm bloklarƒ± kontrol et
  for (const block of db.grid) {
    if (block) {
      // Farklƒ± kriterlere g√∂re say
      if (block.status === 'dug') {
        blocksWithStatusDug++;
      }
      if (block.dugBy) {
        blocksWithDugBy++;
      }
      if (block.owner) {
        blocksWithOwner++;
      }
    }
  }

  // En g√ºvenilir sayƒ±m: dugBy alanƒ± dolu olan bloklar
  totalDugBlocks = blocksWithDugBy;

  console.log('üìä Sonu√ßlar:');
  console.log(`   dugBy alanƒ± dolu olan bloklar: ${blocksWithDugBy}`);
  console.log(`   Status 'dug' olan bloklar: ${blocksWithStatusDug}`);
  console.log(`   owner alanƒ± dolu olan bloklar: ${blocksWithOwner}`);

  console.log(`\nüéØ Digzone'da kazƒ±lmƒ±≈ü toplam blok sayƒ±sƒ±: ${totalDugBlocks}`);

  // Kullanƒ±cƒ± bazlƒ± istatistikler (dugBy alanƒ±na g√∂re)
  const userStats = {};
  for (const block of db.grid) {
    if (block && block.dugBy) {
      userStats[block.dugBy] = (userStats[block.dugBy] || 0) + 1;
    }
  }

  console.log('\nüë• Kullanƒ±cƒ± bazlƒ± daƒüƒ±lƒ±m (dugBy alanƒ±na g√∂re):');
  Object.entries(userStats)
    .sort(([,a], [,b]) => b - a)
    .forEach(([user, count]) => {
      console.log(`   ${user}: ${count} blok`);
    });

} catch (error) {
  console.error('‚ùå Hata:', error.message);
  process.exit(1);
}




